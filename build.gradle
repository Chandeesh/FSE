/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath("net.serenity-bdd:serenity-gradle-plugin:2.4.24")
	}
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'java-library'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'
	compile group: 'net.serenity-bdd', name: 'serenity-core', version: '2.4.34'
	implementation group: 'net.serenity-bdd', name: 'serenity-cucumber6', version: '2.4.24'
	compile group: 'net.serenity-bdd', name: 'serenity-report-resources', version: '2.4.34'
	compile group: 'net.serenity-bdd', name: 'serenity-junit', version: '2.4.34'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.1'
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.7', ext: 'pom'
	testCompile group: 'org.assertj', name: 'assertj-core', version: '3.19.0'
	implementation group: 'net.serenity-bdd', name: 'serenity-screenplay', version: '2.4.34'
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    implementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: '2.4.34'
}

task uitest(type: Test) {
 
  test {
  // explicitly include or exclude tests
  include 'com/test/runner/UIRunner'
  exclude 'com/test/runner/APIRunner'
  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = false
  
  // set heap size for the test JVM(s)
  minHeapSize = "128m"
  maxHeapSize = "512m"
 }
 ignoreFailures = true
  // set JVM arguments for the test JVM(s)

}

task apitest(type: Test) {
 
  test {
  // explicitly include or exclude tests
  include 'com/test/runner/APIRunner'
  exclude 'com/test/runner/UIRunner'
  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = false
  ignoreFailures = true
  // set heap size for the test JVM(s)
  minHeapSize = "128m"
  maxHeapSize = "512m"
 }
}
